{
  "__inputs": [
    {
      "name": "DS_INFLUXDB",
      "label": "Ollama InfluxDB",
      "description": "Select the InfluxDB data source",
      "type": "datasource",
      "pluginId": "influxdb",
      "pluginName": "InfluxDB"
    }
  ],
  "title": "Ollama API Sessions Gantt",
  "uid": "ollama-sessions-gantt",
  "schemaVersion": 38,
  "version": 1,
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "templating": {
    "list": [
      {
        "name": "host",
        "type": "query",
        "datasource": "${DS_INFLUXDB}",
        "query": "import \"influxdata/influxdb/schema\"\nschema.tagValues(bucket: \"ollama-logs\", tag: \"host\")",
        "refresh": 1,
        "sort": 1,
        "hide": 0
      }
    ]
  },
  "panels": [
    {
      "id": 1,
      "type": "state-timeline",
      "title": "Ollama API Sessions",
      "datasource": "${DS_INFLUXDB}",
      "targets": [
        {
          "refId": "A",
          "query": "import \"strings\"\nimport \"regexp\"\nimport \"experimental\"\n\n// --- Часть 1: Получаем сессии и модели с максимально широким диапазоном ---\n// Это гарантирует, что мы всегда найдем начало сессии, независимо от зума.\nsessions_with_sha_and_ctx = from(bucket: \"ollama-logs\")\n  |> range(start: 0)\n  |> filter(fn: (r) => r._measurement == \"ollama_logs\" and r._field == \"message\" and r.host == \"${host}\")\n  |> filter(fn: (r) => strings.containsStr(v: r._value, substr: \"starting llama server\"))\n  |> map(fn: (r) => {\n      sha_regex = regexp.compile(v: \"sha256-([0-9a-f]{64})\")\n      ctx_regex = regexp.compile(v: \"--ctx-size [0-9]+\")\n      sha_match = regexp.findString(r: sha_regex, v: r._value)\n      ctx_match = regexp.findString(r: ctx_regex, v: r._value)\n      sha256_clean = if sha_match != \"\" then strings.trimPrefix(v: sha_match, prefix: \"sha256-\") else \"\"\n      ctx_size = if ctx_match != \"\" then strings.split(v: ctx_match, t: \" \")[1] else \"N/A\"\n      return { _time: r._time, sha256: sha256_clean, ctx: ctx_size }\n  })\n  |> filter(fn: (r) => r.sha256 != \"\")\n\nmodel_inventory = from(bucket: \"ollama-logs\")\n  |> range(start: 0)\n  |> filter(fn: (r) => r._measurement == \"ollama_model_inventory\" and r.host == \"${host}\")\n  |> last()\n  |> pivot(rowKey:[\"model_name\"], columnKey:[\"_field\"], valueColumn:\"_value\")\n  |> keep(columns:[\"model_name\", \"sha256\"])\n\nsession_starts_with_models = join(\n  tables: {sessions: sessions_with_sha_and_ctx, inventory: model_inventory},\n  on: [\"sha256\"]\n)\n|> map(fn: (r) => ({\n    _time: r._time,\n    session_label: r.model_name + \" (ctx: \" + r.ctx + \")\",\n    endpoint: \"\",\n    latency_ms: -1.0,\n    status: -1\n}))\n|> keep(columns: [\"_time\", \"session_label\", \"endpoint\", \"latency_ms\", \"status\"])\n\n// --- Часть 2: Получаем API запросы (с узким диапазоном Grafana) ---\nrequests = from(bucket: \"ollama-logs\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"ollama_logs\" and r._field == \"message\" and r.host == \"${host}\")\n  |> filter(fn: (r) => strings.containsStr(v: r._value, substr: \"[GIN]\") and strings.containsStr(v: r._value, substr: \"\\\"/api/chat\\\"\"))\n  |> map(fn: (r) => {\n      parts = strings.split(v: r._value, t: \"|\")\n      latency_str = strings.trimSpace(v: parts[2])\n      re_numeric = regexp.compile(v: \"[0-9\\\\.]+\")\n      numeric_part_str = regexp.findString(r: re_numeric, v: latency_str)\n      numeric_val = if numeric_part_str != \"\" then float(v: numeric_part_str) else 0.0\n      multiplier = if strings.containsStr(v: latency_str, substr: \"ms\") then 1.0 else if strings.containsStr(v: latency_str, substr: \"s\") then 1000.0 else if strings.containsStr(v: latency_str, substr: \"us\") then 0.001 else 0.0\n      endpoint_part = strings.trimSpace(v: parts[4])\n      endpoint = strings.split(v: endpoint_part, t: \"\\\"\")[1]\n      return { _time: r._time, endpoint: endpoint, latency_ms: numeric_val * multiplier, status: int(v: strings.trimSpace(v: parts[1])) }\n  })\n  |> keep(columns: [\"_time\", \"endpoint\", \"latency_ms\", \"status\"])\n\n// --- Финальная сборка ---\nunion(tables: [requests, session_starts_with_models])\n  |> group()\n  |> sort(columns: [\"_time\"])\n  |> fill(column: \"session_label\", usePrevious: true)\n  |> filter(fn: (r) => r.endpoint != \"\" and exists r.session_label)\n  |> rename(columns: {_time: \"request_start\"})\n  |> map(fn: (r) => ({\n      _time: r.request_start,\n      endTime: experimental.addDuration(d: duration(v: int(v: r.latency_ms * 1000000.0)), to: r.request_start),\n      _value: r.endpoint,\n      series: r.session_label\n  }))\n  |> group(columns: [\"series\"])"
        }
      ],
      "options": {
        "showValue": "always",
        "rowHeight": 0.9,
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showValue": true
        }
      }
    }
  ]
}
