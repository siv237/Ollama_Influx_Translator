{
  "__inputs": [
    {
      "name": "DS_INFLUXDB",
      "label": "Ollama InfluxDB",
      "description": "Select the InfluxDB data source",
      "type": "datasource",
      "pluginId": "influxdb",
      "pluginName": "InfluxDB"
    }
  ],
  "title": "Ollama Model Inventory",
  "uid": "ollama-inventory",
  "schemaVersion": 38,
  "version": 1,
  "panels": [
    {
      "id": 1,
      "type": "table",
      "title": "Model Inventory",
      "datasource": "${DS_INFLUXDB}",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"ollama-logs\")\n  |> range(start: -24h)\n  |> filter(fn: (r) => r.host == \"${host}\")\n  |> filter(fn: (r) => r._measurement == \"ollama_model_inventory\")\n  |> group(columns:[\"model_name\", \"_field\"])\n  |> last()\n  |> pivot(rowKey:[\"model_name\"], columnKey:[\"_field\"], valueColumn:\"_value\")\n  |> keep(columns:[\"model_name\", \"sha256\", \"size\", \"manifests_path\"])\n  |> group()"
        }
      ],
      "options": {
        "showHeader": true,
        "sortBy": []
      },
      "fieldConfig": {
        "defaults": {
          "unit": "bytes",
          "mappings": [],
          "min": 0
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "size"
            },
            "properties": [
              {
                "id": "unit",
                "value": "bytes"
              },
              {
                "id": "custom.width",
                "value": 100
              }
            ]
          }
        ]
      }
    },
    {
      "id": 2,
      "type": "table",
      "title": "Запуски Ollama",
      "datasource": "${DS_INFLUXDB}",
      "targets": [
        {
          "refId": "A",
          "query": "import \"strings\"\n\ndata = from(bucket: \"ollama-logs\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r.host == \"${host}\")\n  |> filter(fn: (r) => r._measurement == \"ollama_logs\")\n  |> filter(fn: (r) => r._field == \"message\")\n\nservice_starts = data\n  |> filter(fn: (r) => r._value =~ /Started ollama\\.service/)\n  |> map(fn: (r) => ({ r with _field: \"service_start\", _value: \"Запущен\"}))\n\napi_events = data\n  |> filter(fn: (r) => r._value =~ /Listening on.*11434/)\n  |> map(fn: (r) => ({ r with _field: \"api_version\", _value: strings.split(v: strings.split(v: r._value, t: \"(version \")[1], t: \")\")[0]}))\n\ngpu_raw = data\n  |> filter(fn: (r) => r._value =~ /inference compute/)\n  |> map(fn: (r) => ({ r with message: strings.replaceAll(v: r._value, t: \"\\\"\", u: \"\")}))\n\ngpu_name = gpu_raw |> map(fn: (r) => ({ r with _field: \"gpu_name\", _value: strings.split(v: strings.split(v: r.message, t: \"name=\")[1], t: \" total\")[0]}))\ngpu_id = gpu_raw |> map(fn: (r) => ({ r with _field: \"gpu_id\", _value: strings.split(v: strings.split(v: r.message, t: \"id=\")[1], t: \" \")[0]}))\ngpu_library = gpu_raw |> map(fn: (r) => ({ r with _field: \"gpu_library\", _value: strings.split(v: strings.split(v: r.message, t: \"library=\")[1], t: \" \")[0]}))\ngpu_variant = gpu_raw |> map(fn: (r) => ({ r with _field: \"gpu_variant\", _value: strings.split(v: strings.split(v: r.message, t: \"variant=\")[1], t: \" \")[0]}))\ngpu_compute = gpu_raw |> map(fn: (r) => ({ r with _field: \"gpu_compute\", _value: strings.split(v: strings.split(v: r.message, t: \"compute=\")[1], t: \" \")[0]}))\ngpu_driver = gpu_raw |> map(fn: (r) => ({ r with _field: \"gpu_driver\", _value: strings.split(v: strings.split(v: r.message, t: \"driver=\")[1], t: \" \")[0]}))\ngpu_total = gpu_raw |> map(fn: (r) => ({ r with _field: \"gpu_total\", _value: strings.split(v: strings.split(v: r.message, t: \"total=\")[1], t: \" available\")[0]}))\ngpu_available = gpu_raw |> map(fn: (r) => ({ r with _field: \"gpu_available\", _value: strings.split(v: strings.split(v: r.message, t: \"available=\")[1], t: \"\")[0]}))\n\nunion(tables: [service_starts, api_events, gpu_name, gpu_id, gpu_library, gpu_variant, gpu_compute, gpu_driver, gpu_total, gpu_available])\n  |> keep(columns: [\"_time\", \"host\", \"_field\", \"_value\"])\n  |> aggregateWindow(every: 5m, fn: last, createEmpty: false)\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> filter(fn: (r) => exists r.service_start or exists r.api_version or exists r.gpu_name)\n  |> sort(columns: [\"_time\"], desc: true)"
        }
      ],
      "options": {
        "showHeader": true,
        "sortBy": [
          {
            "displayName": "_time",
            "desc": true
          }
        ],
        "footer": {
          "show": false
        }
      },
      "fieldConfig": {
        "defaults": {
          "mappings": []
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "_time"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Время запуска"
              },
              {
                "id": "custom.width",
                "value": 180
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "host"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Хост"
              },
              {
                "id": "custom.width",
                "value": 120
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "service_start"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Сервис запущен"
              },
              {
                "id": "custom.width",
                "value": 200
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "api_version"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Версия API"
              },
              {
                "id": "custom.width",
                "value": 100
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "api_port"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Порт API"
              },
              {
                "id": "custom.width",
                "value": 80
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "gpu_name"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "GPU"
              },
              {
                "id": "custom.width",
                "value": 200
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "gpu_total"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Всего памяти"
              },
              {
                "id": "custom.width",
                "value": 120
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "gpu_available"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Доступно памяти"
              },
              {
                "id": "custom.width",
                "value": 140
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "gpu_driver"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Драйвер GPU"
              },
              {
                "id": "custom.width",
                "value": 100
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "gpu_id"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "ID GPU"
              },
              {
                "id": "custom.width",
                "value": 100
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "gpu_library"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Библиотека GPU"
              },
              {
                "id": "custom.width",
                "value": 150
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "gpu_variant"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Вариант GPU"
              },
              {
                "id": "custom.width",
                "value": 120
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "gpu_compute"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Вычислительная мощность GPU"
              },
              {
                "id": "custom.width",
                "value": 180
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 24,
        "x": 0,
        "y": 9
      }
    }
  ],
  "time": {
    "from": "now-24h",
    "to": "now"
  },
  "templating": {
    "list": [
      {
        "type": "query",
        "name": "host",
        "label": "Host",
        "datasource": "${DS_INFLUXDB}",
        "query": "import \"influxdata/influxdb/schema\"\nschema.tagValues(bucket: \"ollama-logs\", tag: \"host\")",
        "refresh": 1,
        "sort": 0,
        "multi": false,
        "includeAll": false,
        "hide": 0
      }
    ]
  },
  "refresh": "1h"
}